name: Website release [production]
run-name: ${{ github.actor }} is deploying the ADC web application to production
on:
  workflow_dispatch:
  push:
    branches:
      - main
      
jobs:
  measure-code:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Configure node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.4.0
          
      - name: Install dependencies
        run: npm install
      - name: Gather metrics
        run: echo "TODO - implement code metrics via SonarQube"

  test-code:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Configure node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.4.0
          
      - name: Install dependencies
        run: npm install
        
      - name: Test code
        run: npm test

  test-security:

    # name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    # runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"















  


  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    needs: [measure-code, test-code, test-security]
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Configure node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.4.0
          
      - name: Install dependencies
        run: npm install
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
          
      - name: Deploy application
        uses: reggionick/s3-deploy@v4
        with:
          folder: app/src
          bucket: ${{ secrets.S3_BUCKET }}
          bucket-region: ${{ secrets.S3_BUCKET_REGION }}
          dist-id: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          invalidation: /
          delete-removed: true
          no-cache: true
          private: true
          files-to-include: '{.*/**,**}'
  
  smoke-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    needs: deploy
    
    steps:
      - name: Smoke test
        run: echo "TODO - implement smoke testing. Tech stack decision pending..."
